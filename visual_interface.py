from typing import Any, Optional, Dict, List
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    InputMediaPhoto,
    CallbackQuery,
    FSInputFile
)
from aiogram.types import BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import Config
import asyncio
import os
import logging
import matplotlib.pyplot as plt
import numpy as np
from io import BytesIO
import time

logger = logging.getLogger('VisualInterface')

class UIBuilder:
    THEMES = {
        'default': {
            'primary': 'üîµ',
            'success': 'üü¢',
            'warning': 'üü°',
            'error': 'üî¥',
            'text': '‚ö™'
        },
        'dark': {
            'primary': 'üåë',
            'success': 'üåë',
            'warning': 'üåï',
            'error': 'üî•',
            'text': '‚ö™'
        },
        'colorful': {
            'primary': 'üåà',
            'success': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'text': 'üìù'
        }
    }
    
    # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user_editing_states: Dict[int, Dict[str, Any]] = {}  # –î–ª—è AI –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user_general_editing_states: Dict[int, Dict[str, Any]] = {}  # –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

    def __init__(self, config: Config):
        self.config = config
        self.user_themes = {}
    
    def get_theme(self, user_id: int) -> dict:
        return self.user_themes.get(user_id, self.THEMES['default'])
    
    async def main_menu(self, user_id: int) -> Optional[InlineKeyboardMarkup]:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if user_id != self.config.OWNER_ID:
            return None
        
        theme = self.get_theme(user_id)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        buttons = [
            [
                InlineKeyboardButton(
                    text=f"{theme['primary']} –ì–ª–∞–≤–Ω–∞—è",
                    callback_data="main"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{theme['text']} –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                    callback_data="monitoring"
                ),
                InlineKeyboardButton(
                    text=f"{theme['text']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="settings"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{theme['text']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="stats"
                ),
                InlineKeyboardButton(
                    text=f"{theme['text']} RSS –õ–µ–Ω—Ç—ã",
                    callback_data="rss_list"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{theme['success']} –ó–∞–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="start_bot"
                ),
                InlineKeyboardButton(
                    text=f"{theme['warning']} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                    callback_data="stop_bot"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
                    callback_data="change_theme"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def back_to_settings(self) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="settings"
        )
        return builder.as_markup()
    
    async def back_button(self) -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="settings"
        )
        return builder.as_markup()

    async def stats_visualization(self, stats: dict) -> tuple:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
            plt.figure(figsize=(10, 6))
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä)
            hours = list(range(24))
            posts = [stats.get(f'hour_{h}', 0) for h in hours]
            
            plt.bar(hours, posts, color='#4CAF50')
            plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º')
            plt.xlabel('–ß–∞—Å—ã')
            plt.ylabel('–ü–æ—Å—Ç—ã')
            plt.xticks(hours)
            plt.grid(axis='y', alpha=0.5)
            
            summary = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
                f"‚ñ∏ –ü–æ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{stats.get('posts_sent', 0)}</b>\n"
                f"‚ñ∏ –û—à–∏–±–æ–∫: <b>{stats.get('errors', 0)}</b>\n"
                f"‚ñ∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π AI: <b>{stats.get('yagpt_used', 0)}</b>\n"
                f"‚ñ∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: <b>{stats.get('images_generated', 0)}</b>\n"
                f"‚ñ∏ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞: <b>{stats.get('avg_processing_time', 0):.2f} —Å–µ–∫</b>\n"
                f"‚ñ∏ –ê–ø—Ç–∞–π–º: <b>{stats.get('uptime', '0:00')}</b>"
            )

            # –í –º–µ—Ç–æ–¥–µ stats_visualization
            buf = BytesIO()
            plt.savefig(buf, format='png', bbox_inches='tight')
            buf.seek(0)
            image_data = buf.getvalue()  # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã
            photo = BufferedInputFile(image_data, filename="stats.png")  # –°–æ–∑–¥–∞–µ–º InputFile
            return summary, InputMediaPhoto(media=photo, caption=summary)
            
        except Exception as e:
            logger.error(f"Stats visualization error: {str(e)}")
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", None

    async def settings_menu(self, user_id: int) -> InlineKeyboardMarkup:
        theme = self.get_theme(user_id)
        builder = InlineKeyboardBuilder()
        
        builder.button(
            text=f"{theme['text']} –û—Å–Ω–æ–≤–Ω—ã–µ", 
            callback_data="settings_general"
        )
        builder.button(
            text=f"{theme['text']} –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
            callback_data="settings_images"
        )
        builder.button(
            text=f"{theme['text']} AI", 
            callback_data="settings_ai"
        )
        builder.button(
            text=f"{theme['text']} RSS", 
            callback_data="settings_rss"
        )
        builder.button(
            text=f"{theme['text']} –û–ø–æ–≤–µ—â–µ–Ω–∏—è", 
            callback_data="settings_notify"
        )
        builder.button(
            text=f"{theme['primary']} –ù–∞–∑–∞–¥", 
            callback_data="main_menu"
        )
        
        builder.adjust(2, 2, 2, 1)
        return builder.as_markup()

    async def image_settings_view(self, user_id: int) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        theme = self.get_theme(user_id)
        text = (
            "üñº <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
            f"‚ñ∏ –ò—Å—Ç–æ—á–Ω–∏–∫: <b>{self.config.IMAGE_SOURCE.capitalize()}</b>\n"
            f"‚ñ∏ –†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {'–í–∫–ª' if self.config.IMAGE_FALLBACK else '–í—ã–∫–ª'}\n"
            f"‚ñ∏ –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: <code>{self.config.TEXT_COLOR}</code>\n"
            f"‚ñ∏ –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏: <code>{self.config.STROKE_COLOR}</code>\n"
            f"‚ñ∏ –®–∏—Ä–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏: <b>{self.config.STROKE_WIDTH}px</b>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            from PIL import Image, ImageDraw, ImageFont
            img = Image.new('RGB', (400, 200), (40, 40, 60))
            draw = ImageDraw.Draw(img)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞
            font_path = os.path.join(self.config.FONTS_DIR, self.config.DEFAULT_FONT)
            font = ImageFont.truetype(font_path, 32) if os.path.exists(font_path) else ImageFont.load_default()
            
            # –¢–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            draw.text(
                (200, 100), 
                "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞", 
                fill=tuple(self.config.TEXT_COLOR),
                stroke_fill=tuple(self.config.STROKE_COLOR),
                stroke_width=self.config.STROKE_WIDTH,
                font=font,
                anchor="mm"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            # –í –º–µ—Ç–æ–¥–µ image_settings_view
            buf = BytesIO()
            img.save(buf, format='PNG')
            buf.seek(0)
            image_data = buf.getvalue()
            photo = BufferedInputFile(image_data, filename="preview.png")
            return text, InputMediaPhoto(media=photo, caption=text)
            
        except Exception as e:
            logger.error(f"Preview generation failed: {str(e)}")
            return text, None

    async def theme_selector(self, user_id: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        
        for theme_name in self.THEMES:
            builder.button(
                text=f"{self.THEMES[theme_name]['primary']} {theme_name.capitalize()}",
                callback_data=f"set_theme_{theme_name}"
            )
        
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="settings"
        )
        
        builder.adjust(2, 1)
        return builder.as_markup()

    async def progress_bar(self, current: int, total: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        bar_length = 10
        filled = int(bar_length * current / total)
        empty = bar_length - filled
        return f"[{'‚ñ†' * filled}{'‚ñ°' * empty}] {current}/{total}"

    async def animated_processing(self, message, process_name: str, duration: int = 5):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å"""
        status_msg = await message.answer(f"üîÑ {process_name}...")
        
        for i in range(1, 11):
            await asyncio.sleep(duration / 10)
            bar = "‚¨õ" * i + "‚¨ú" * (10 - i)
            await status_msg.edit_text(f"‚è≥ {process_name}\n{bar} {i*10}%")
        
        await status_msg.edit_text(f"‚úÖ {process_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    async def rss_feed_status(self, feeds: list) -> str:
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ RSS-–ª–µ–Ω—Ç"""
        lines = ["üì° <b>–°—Ç–∞—Ç—É—Å RSS-–ª–µ–Ω—Ç</b>\n"]
        
        for feed in feeds:
            status_icon = 'üü¢' if feed.get('active', True) else 'üî¥'
            error_icon = f"‚ùóÔ∏è {feed.get('error_count', 0)}" if feed.get('error_count', 0) > 0 else ""
            lines.append(f"{status_icon} {feed['url']} {error_icon}")
        
        return "\n".join(lines)
    
    async def general_settings_view(self, user_id: int, edit_mode: bool = False) -> tuple:
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ä–µ–∂–∏–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ/–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = self.user_general_editing_states.get(user_id, {
            'check_interval': self.config.CHECK_INTERVAL,
            'max_posts': self.config.MAX_POSTS_PER_CYCLE,
            'posts_per_hour': self.config.POSTS_PER_HOUR,
            'min_delay': self.config.MIN_DELAY_BETWEEN_POSTS
        })
        
        text = (
            "‚öôÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings['check_interval']} —Å–µ–∫ {'‚úèÔ∏è' if edit_mode else ''}\n"
            f"‚Ä¢ –ú–∞–∫—Å. –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ü–∏–∫–ª: {settings['max_posts']} {'‚úèÔ∏è' if edit_mode else ''}\n"
            f"‚Ä¢ –ü–æ—Å—Ç–æ–≤ –≤ —á–∞—Å: {settings['posts_per_hour']} {'‚úèÔ∏è' if edit_mode else ''}\n"
            f"‚Ä¢ –ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: {settings['min_delay']} —Å–µ–∫ {'‚úèÔ∏è' if edit_mode else ''}"
        )
        
        builder = InlineKeyboardBuilder()
        if edit_mode:
            builder.button(text="‚úèÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="edit_general_check_interval")
            builder.button(text="‚úèÔ∏è –ú–∞–∫—Å. –ø–æ—Å—Ç–æ–≤", callback_data="edit_general_max_posts")
            builder.button(text="‚úèÔ∏è –ü–æ—Å—Ç–æ–≤/—á–∞—Å", callback_data="edit_general_posts_per_hour")
            builder.button(text="‚úèÔ∏è –ó–∞–¥–µ—Ä–∂–∫–∞", callback_data="edit_general_min_delay")
            builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_general_settings")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_general_edit")
            builder.adjust(2, 2, 1)
        else:
            builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_general_settings")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")
        
        return text, builder.as_markup()

    async def general_param_selector(self, user_id: int, param: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        current_value = self.config.__dict__.get(param.upper())
        if user_id in self.user_general_editing_states:
            current_value = self.user_general_editing_states[user_id].get(param, current_value)
        
        presets = {
            'check_interval': [60, 300, 600, 1800],
            'max_posts': [1, 3, 5, 10],
            'posts_per_hour': [10, 20, 30, 50],
            'min_delay': [10, 30, 60, 120]
        }
        
        builder = InlineKeyboardBuilder()
        for value in presets.get(param, []):
            builder.button(
                text=f"{'‚úÖ ' if value == current_value else ''}{value}",
                callback_data=f"set_general_{param}:{value}"
            )
        
        builder.button(text="üî¢ –í—Ä—É—á–Ω—É—é", callback_data=f"set_general_{param}_custom")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_general_settings")
        builder.adjust(2, 2, 1)
        return builder.as_markup()
    
    async def start_general_edit(self, user_id: int):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.user_general_editing_states[user_id] = {
            'check_interval': self.config.CHECK_INTERVAL,
            'max_posts': self.config.MAX_POSTS_PER_CYCLE,
            'posts_per_hour': self.config.POSTS_PER_HOUR,
            'min_delay': self.config.MIN_DELAY_BETWEEN_POSTS
        }
    
    async def update_general_setting(self, user_id: int, param: str, value: Any):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        if user_id in self.user_general_editing_states:
            self.user_general_editing_states[user_id][param] = value
    
    async def save_general_settings(self, user_id: int) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        if user_id not in self.user_general_editing_states:
            return {}
        
        changes = {}
        settings = self.user_general_editing_states.pop(user_id)
        
        if settings['check_interval'] != self.config.CHECK_INTERVAL:
            changes['CHECK_INTERVAL'] = settings['check_interval']
        
        if settings['max_posts'] != self.config.MAX_POSTS_PER_CYCLE:
            changes['MAX_POSTS_PER_CYCLE'] = settings['max_posts']
        
        if settings['posts_per_hour'] != self.config.POSTS_PER_HOUR:
            changes['POSTS_PER_HOUR'] = settings['posts_per_hour']
        
        if settings['min_delay'] != self.config.MIN_DELAY_BETWEEN_POSTS:
            changes['MIN_DELAY_BETWEEN_POSTS'] = settings['min_delay']
        
        return changes
    
    async def cancel_general_edit(self, user_id: int) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if user_id in self.user_general_editing_states:
            del self.user_general_editing_states[user_id]
        logger.debug(f"–°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {user_id}")
    
    async def cancel_ai_edit(self, user_id: int) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if user_id in self.ai_edit_states:
            del self.ai_edit_states[user_id]
        logger.debug(f"–°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {user_id}")

    async def ai_settings_view(self, user_id: int, edit_mode: bool = False) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if edit_mode and user_id in self.user_editing_states:
            settings = self.user_editing_states[user_id]
        else:
            settings = {
                'enabled': self.config.ENABLE_YAGPT,
                'model': self.config.YAGPT_MODEL,
                'temperature': self.config.YAGPT_TEMPERATURE,
                'max_tokens': self.config.YAGPT_MAX_TOKENS
            }

        theme = self.get_theme(user_id)
        text = (
            "üß† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ YandexGPT</b>\n\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'üü¢ –í–∫–ª—é—á–µ–Ω' if settings['enabled'] else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {settings['model']} {'‚úèÔ∏è' if edit_mode else ''}\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {settings['temperature']} {'‚úèÔ∏è' if edit_mode else ''}\n"
            f"‚Ä¢ –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {settings['max_tokens']} {'‚úèÔ∏è' if edit_mode else ''}"
        )
        
        builder = InlineKeyboardBuilder()
        
        if edit_mode:
            # –ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –∫–∞—Ä–∞–Ω–¥–∞—à–∞
            builder.button(text="‚úèÔ∏è –ú–æ–¥–µ–ª—å", callback_data="edit_ai_model")
            builder.button(text="‚úèÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data="edit_ai_temp")
            builder.button(text="‚úèÔ∏è –¢–æ–∫–µ–Ω—ã", callback_data="edit_ai_tokens")
            builder.button(
                text=f"{'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if settings['enabled'] else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} –ò–ò",
                callback_data="toggle_ai_enabled"
            )

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_ai_settings")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_ai_edit")
            
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
            builder.adjust(2, 1)  # 2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            builder.button(
                text=f"{theme['primary']} –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data="edit_ai_settings"
            )
            builder.button(
                text=f"{theme['text']} –ù–∞–∑–∞–¥", 
                callback_data="settings"
            )
            builder.adjust(2)  # –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        
        return text, builder.as_markup()

    async def ai_model_selector(self, user_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ AI"""
        current_model = self.config.YAGPT_MODEL
        if user_id in self.user_editing_states:
            current_model = self.user_editing_states[user_id].get('model', current_model)
        
        builder = InlineKeyboardBuilder()
        for model in ['yandexgpt-lite', 'yandexgpt-pro']:
            builder.button(
                text=f"{'‚úÖ ' if model == current_model else ''}{model}",
                callback_data=f"set_ai_model:{model}"
            )
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_ai_settings")
        builder.adjust(1, 1)
        return builder.as_markup()

    async def ai_temp_selector(self, user_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
        current_temp = self.config.YAGPT_TEMPERATURE
        if user_id in self.user_editing_states:
            current_temp = self.user_editing_states[user_id].get('temperature', current_temp)
        
        builder = InlineKeyboardBuilder()
        for temp in [0.1, 0.3, 0.5, 0.7, 0.9]:
            builder.button(
                text=f"{'‚úÖ ' if abs(temp - current_temp) < 0.01 else ''}{temp}",
                callback_data=f"set_ai_temp:{temp}"
            )
        builder.button(text="üî¢ –í—Ä—É—á–Ω—É—é", callback_data="set_ai_temp_custom")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_ai_settings")
        builder.adjust(2, 2, 2, 1)
        return builder.as_markup()

    async def ai_tokens_selector(self, user_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        current_tokens = self.config.YAGPT_MAX_TOKENS
        if user_id in self.user_editing_states:
            current_tokens = self.user_editing_states[user_id].get('max_tokens', current_tokens)
        
        builder = InlineKeyboardBuilder()
        for tokens in [1000, 2000, 3000, 4000, 5000]:
            builder.button(
                text=f"{'‚úÖ ' if tokens == current_tokens else ''}{tokens}",
                callback_data=f"set_ai_tokens:{tokens}"
            )
        builder.button(text="üî¢ –í—Ä—É—á–Ω—É—é", callback_data="set_ai_tokens_custom")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_ai_settings")
        builder.adjust(2, 2, 2, 1)
        return builder.as_markup()

    async def start_ai_edit(self, user_id: int):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_editing_states[user_id] = {
            'enabled': self.config.ENABLE_YAGPT,
            'model': self.config.YAGPT_MODEL,
            'temperature': self.config.YAGPT_TEMPERATURE,
            'max_tokens': self.config.YAGPT_MAX_TOKENS
        }

    async def update_ai_setting(self, user_id: int, key: str, value: Any):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        if key == 'enabled':  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            if user_id in self.user_editing_states:
                self.user_editing_states[user_id]['enabled'] = not self.user_editing_states[user_id]['enabled']
        elif user_id in self.user_editing_states:
            self.user_editing_states[user_id][key] = value

    async def save_ai_settings(self, user_id: int) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        if user_id not in self.user_editing_states:
            return {}
        
        changes = {}
        settings = self.user_editing_states.pop(user_id)
        
        if settings['enabled'] != self.config.ENABLE_YAGPT:
            changes['ENABLE_YAGPT'] = settings['enabled']

        if settings['model'] != self.config.YAGPT_MODEL:
            changes['YAGPT_MODEL'] = settings['model']
        
        if abs(settings['temperature'] - self.config.YAGPT_TEMPERATURE) > 0.01:
            changes['YAGPT_TEMPERATURE'] = settings['temperature']
        
        if settings['max_tokens'] != self.config.YAGPT_MAX_TOKENS:
            changes['YAGPT_MAX_TOKENS'] = settings['max_tokens']
        
        return changes

    async def cancel_ai_edit(self, user_id: int):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI"""
        if user_id in self.user_editing_states:
            self.user_editing_states.pop(user_id)
    
    async def rss_settings_view(self, feeds: list, edit_mode: bool = False) -> tuple:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è RSS-–ª–µ–Ω—Ç–∞–º–∏ —Å —Ä–µ–∂–∏–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç RSS-–ª–µ–Ω—Ç
        if not feeds:
            text = "üì° <b>–ù–µ—Ç RSS-–ª–µ–Ω—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ª–µ–Ω—Ç—É"
            builder = InlineKeyboardBuilder()
            
            if edit_mode:
                builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–µ–Ω—Ç—É", callback_data="rss_add_start")
                builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")
                builder.adjust(1)
            else:
                builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–µ–Ω—Ç—É", callback_data="rss_add_start")
                builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")
                builder.adjust(1)
            
            keyboard = builder.as_markup()
            keyboard.inline_message_id = f"rss_{int(time.time())}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            return text, keyboard
        
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if edit_mode:
            text = "üì° <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RSS-–ª–µ–Ω—Ç</b>\n\n"
            for i, feed in enumerate(feeds):
                status = "üü¢" if feed.get('active', True) else "üî¥"
                error_icon = f" ‚ùóÔ∏è {feed.get('error_count', 0)}" if feed.get('error_count', 0) > 0 else ""
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                url_display = feed['url']
                if len(url_display) > 50:
                    url_display = url_display[:25] + "..." + url_display[-25:]
                text += f"{i+1}. {status} {url_display}{error_icon}\n"
            
            builder = InlineKeyboardBuilder()
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –ª–µ–Ω—Ç—ã
            for i, feed in enumerate(feeds):
                action = "disable" if feed.get('active', True) else "enable"
                builder.button(
                    text=f"{'‚è∏' if action == 'disable' else '‚ñ∂Ô∏è'} –õ–µ–Ω—Ç–∞ {i+1}",
                    callback_data=f"rss_toggle_{i}_{action}"
                )
                builder.button(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {i+1}",
                    callback_data=f"rss_remove_{i}"
                )
            
            # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–µ–Ω—Ç—É", callback_data="rss_add_start")
            builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_rss_settings")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rss_settings")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫: 2 –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ª–µ–Ω—Ç—É, –∑–∞—Ç–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
            builder.adjust(2, *[2 for _ in range(len(feeds))], 1, 1)
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        else:
            text = "üì° <b>–¢–µ–∫—É—â–∏–µ RSS-–ª–µ–Ω—Ç—ã</b>\n\n"
            for i, feed in enumerate(feeds):
                status = 'üü¢' if feed.get('active', True) else 'üî¥'
                error_icon = f" ‚ùóÔ∏è {feed.get('error_count', 0)}" if feed.get('error_count', 0) > 0 else ""
                last_check = f" üìÖ {feed.get('last_check', '–Ω–∏–∫–æ–≥–¥–∞')}" if feed.get('last_check') else ""
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                url_display = feed['url']
                if len(url_display) > 50:
                    url_display = url_display[:25] + "..." + url_display[-25:]
                text += f"{i+1}. {status} {url_display}{error_icon}{last_check}\n"
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_rss_settings")
            builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="rss_refresh")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")
            builder.adjust(2, 1)  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –û–±–Ω–æ–≤–∏—Ç—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –ù–∞–∑–∞–¥ –æ—Ç–¥–µ–ª—å–Ω–æ
        
        keyboard = builder.as_markup()
        keyboard.inline_message_id = f"rss_{int(time.time())}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        return text, keyboard
    
    async def rss_add_dialog(self) -> InlineKeyboardMarkup:
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RSS"""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rss_settings")
        return builder.as_markup()
    
    async def rss_remove_selector(self, feeds: list) -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä –ª–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        builder = InlineKeyboardBuilder()
        
        for i in range(len(feeds)):
            builder.button(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {i+1}",
                callback_data=f"rss_remove_{i}"
            )
        
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="rss_settings")
        builder.adjust(2, 2, 1)
        return builder.as_markup()