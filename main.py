import os
import json
import asyncio
import logging
import signal
import aiohttp
import traceback
import platform
import time
from dotenv import load_dotenv
from config import app_config as config
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Update, Message, ErrorEvent
from aiogram.exceptions import TelegramAPIError
from config import Config
from bot_controller import BotController
from pathlib import Path
from state_manager import StateManager
from rss_parser import AsyncRSSParser
from image_generator import AsyncImageGenerator
from yandex_gpt import AsyncYandexGPT
from telegram_interface import AsyncTelegramBot
from visual_interface import UIBuilder
from typing import Optional, Dict, Any, Union
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler

logger = logging.getLogger('AsyncMain')
load_dotenv()

class TelegramLogHandler(logging.Handler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    def __init__(self, bot, owner_id, notify_level=logging.ERROR):
        super().__init__()
        self.bot = bot
        self.owner_id = owner_id
        self.notify_level = notify_level
        self.rate_limit = 60  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏sef
        self.last_sent = 0

    def emit(self, record):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏
            if record.levelno < self.notify_level:
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
            current_time = time.time()
            if current_time - self.last_sent < self.rate_limit:
                return
                
            message = self.format(record)
            asyncio.create_task(self.send_telegram(message))
            self.last_sent = current_time
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ª–æ–≥–æ–≤: {str(e)}")

    async def send_telegram(self, message):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
            await self.bot.send_message(
                chat_id=self.owner_id,
                text=f"<b>‚ö†Ô∏è –ë–û–¢: {logging.getLevelName(self.notify_level)}</b>\n\n<code>{message}</code>",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")

async def shutdown(controller, connector, session):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.info("Shutting down...")
    try:
        if controller:
            await controller.stop()
    except Exception as e:
        logger.error(f"Controller shutdown error: {str(e)}")
    
    if session and not session.closed:
        try:
            await session.close()
            logger.info("aiohttp session closed")
        except Exception as e:
            logger.error(f"Error closing session: {str(e)}")
    
    if connector:
        try:
            await connector.close()
            logger.info("TCP connector closed")
        except Exception as e:
            logger.error(f"Error closing connector: {str(e)}")
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    for task in tasks:
        task.cancel()
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)

def setup_logging(debug_mode: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    level = logging.DEBUG if debug_mode else logging.INFO
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ (—Ä–æ—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É)
    file_handler = RotatingFileHandler(
        filename=os.path.join(log_dir, 'rss_bot.log'),
        maxBytes=10*1024*1024,  # 10 MB
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(logging.Formatter(log_format))
    
    # –õ–æ–≥ –æ—à–∏–±–æ–∫ (—Ä–æ—Ç–∞—Ü–∏—è –ø–æ –¥–Ω—è–º)
    error_handler = TimedRotatingFileHandler(
        filename=os.path.join(log_dir, 'errors.log'),
        when='midnight',
        backupCount=7,
        encoding='utf-8'
    )
    error_handler.setLevel(logging.WARNING)
    error_handler.setFormatter(logging.Formatter(log_format))
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter(log_format))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=level,
        format=log_format,
        handlers=[file_handler, error_handler, console_handler]
    )
    
    # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —à—É–º–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    for lib in ['asyncio', 'aiohttp', 'PIL']:
        logging.getLogger(lib).setLevel(logging.WARNING)

async def test_bot_commands(telegram_bot: AsyncTelegramBot, owner_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await telegram_bot.bot.send_message(  # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_bot –≤–º–µ—Å—Ç–æ bot
            chat_id=owner_id,
            text="ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!",
            parse_mode="HTML"
        )
        return True
    except Exception as e:
        logger.error(f"Test message failed: {str(e)}")
        return False

async def run_bot():
    logger.info("===== ASYNC BOT STARTING =====")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Config()
    setup_logging(config.DEBUG_MODE)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not config.TOKEN:
        logger.critical("TELEGRAM_TOKEN is required but not set")
        return
        
    if not config.CHANNEL_ID:
        logger.critical("CHANNEL_ID is required but not set")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StateManager
    state_manager = StateManager(config.STATE_FILE, config.MAX_ENTRIES_HISTORY, config)
    logger.info("State manager initialized")
    
    # –°–æ–∑–¥–∞–µ–º TCP –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è aiohttp
    connector = aiohttp.TCPConnector(
        force_close=True,
        enable_cleanup_closed=True,
        limit=0
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏
    session: Optional[aiohttp.ClientSession] = None
    telegram_bot: Optional[AsyncTelegramBot] = None
    controller: Optional[BotController] = None
    polling_task: Optional[asyncio.Task] = None
    tg_handler = None
    
    try:
        # –°–æ–∑–¥–∞–µ–º aiohttp —Å–µ—Å—Å–∏—é
        session = aiohttp.ClientSession(connector=connector)
        logger.info("Created aiohttp session")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        telegram_bot = AsyncTelegramBot(
            token=config.TOKEN,
            channel_id=config.CHANNEL_ID,
            config=config
        )
        logger.info("Telegram bot initialized")

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ-–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
        @telegram_bot.dp.message()
        async def global_blocker(message: Message):
            if message.from_user.id != config.OWNER_ID:
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        await telegram_bot.setup_commands()
        logger.info("Telegram commands menu initialized")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if config.OWNER_ID and not await test_bot_commands(telegram_bot, config.OWNER_ID):
            logger.error("Bot can't send messages, check TOKEN and OWNER_ID")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RSS-–ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        rss_parser = AsyncRSSParser(session, config.PROXY_URL)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YandexGPT –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        yandex_gpt = AsyncYandexGPT(config, session)
        image_generator = AsyncImageGenerator(config)
        logger.info("All components initialized")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        controller = BotController(
            config=config,
            state_manager=state_manager,
            rss_parser=rss_parser,
            image_generator=image_generator,
            yandex_gpt=yandex_gpt,
            telegram_bot=telegram_bot
        )
        logger.info("Bot controller created")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –∫–æ–Ω—Ñ–∏–≥–æ–º
        config.controller = controller
        logger.info("Controller successfully set in config")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º RSS-–ø–∞—Ä—Å–µ—Ä —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º –∏ callback
        rss_parser.set_controller(controller)
        rss_parser.set_on_session_recreate(controller._recreate_session)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤ Telegram –±–æ—Ç–∞
        telegram_bot.set_controller(controller)
        logger.info("Controller linked to Telegram bot")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ Telegram
        if config.OWNER_ID:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            notify_level = getattr(logging, config.NOTIFY_LEVEL, logging.ERROR)
            tg_handler = TelegramLogHandler(
                bot=telegram_bot.bot,
                owner_id=config.OWNER_ID,
                notify_level=notify_level
            )
            tg_handler.setFormatter(logging.Formatter('%(name)s - %(levelname)s - %(message)s'))
            logging.getLogger().addHandler(tg_handler)
            logger.info("Telegram error handler initialized")
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        if not await controller.start():
            raise RuntimeError("Failed to start bot controller")
        logger.info("RSS processing task started")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
        dp = telegram_bot.dp
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        @dp.errors()
        async def errors_handler(event: ErrorEvent):
            logger.error(f"Update {event.update} caused error: {event.exception}")
            return True
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
        if telegram_bot and telegram_bot.bot:
            polling_task = asyncio.create_task(
                dp.start_polling(
                    telegram_bot.bot,
                    allowed_updates=dp.resolve_used_update_types()
                ),
                name="telegram_polling"
            )
            logger.info("Telegram polling task started")
        else:
            logger.warning("Skipping Telegram polling setup - bot not available")
        
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É Ctrl+C
        if platform.system() == 'Windows':
            logger.info("Windows detected, using alternative signal handling")
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            shutdown_event = asyncio.Event()
            
            # –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Ctrl+C
            async def windows_shutdown_handler():
                try:
                    while True:
                        await asyncio.sleep(1)
                except asyncio.CancelledError:
                    logger.info("Ctrl+C received, shutting down")
                    shutdown_event.set()
            
            shutdown_task = asyncio.create_task(windows_shutdown_handler())
        else:
            # –î–ª—è Unix-—Å–∏—Å—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            loop = asyncio.get_running_loop()
            shutdown_event = asyncio.Event()
            
            for s in (signal.SIGTERM, signal.SIGINT):
                loop.add_signal_handler(
                    s, 
                    lambda: shutdown_event.set()
                )
        
        logger.info("Bot started successfully. Press Ctrl+C to stop.")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        try:
            await shutdown_event.wait()
            logger.info("Shutdown event triggered")
        except asyncio.CancelledError:
            logger.info("Main task cancelled")
            
    except (KeyboardInterrupt, asyncio.CancelledError):
        logger.info("Shutdown requested by user")
    except Exception as e:
        logger.critical(f"Fatal error in main loop: {str(e)}\n{traceback.format_exc()}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É
        if config.OWNER_ID and telegram_bot:
            try:
                await telegram_bot.bot.send_message(
                    chat_id=config.OWNER_ID,
                    text=f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê\n\n{str(e)}",
                    parse_mode="HTML"
                )
            except Exception as te:
                logger.error(f"Failed to send error message: {str(te)}")
    finally:
        logger.info("===== SHUTDOWN SEQUENCE STARTED =====")
        
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –∏–∑ –ª–æ–≥–≥–µ—Ä–∞
        if tg_handler:
            logging.getLogger().removeHandler(tg_handler)
            logger.info("Telegram log handler removed")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
            await shutdown(controller, connector, session)
        except Exception as e:
            logger.error(f"Error during shutdown: {str(e)}")
        
        # –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –æ–ø—Ä–æ—Å–∞ Telegram
        if polling_task and not polling_task.done():
            try:
                polling_task.cancel()
                logger.info("Telegram polling task cancellation requested")
            except Exception as e:
                logger.error(f"Error cancelling polling task: {str(e)}")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ Telegram –±–æ—Ç–∞
        if telegram_bot:
            try:
                await telegram_bot.close()
                logger.info("Telegram bot closed")
            except Exception as e:
                logger.error(f"Error closing Telegram bot: {str(e)}")
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        current_task = asyncio.current_task()
        tasks = [t for t in asyncio.all_tasks() if t is not current_task and not t.done()]
        
        if tasks:
            logger.info(f"Cancelling {len(tasks)} pending tasks")
            for task in tasks:
                try:
                    task.cancel()
                except Exception as e:
                    logger.error(f"Error cancelling task: {str(e)}")
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            try:
                await asyncio.gather(*tasks, return_exceptions=True)
            except Exception as e:
                logger.error(f"Error gathering tasks: {str(e)}")
            logger.info("All pending tasks cancelled")
        
        logger.info("===== ASYNC BOT STOPPED =====")

async def check_internet_connection(session):
    while True:
        try:
            async with session.get("https://google.com", timeout=10) as resp:
                if resp.status != 200:
                    logger.warning("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
        except Exception:
            logger.error("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!")
        await asyncio.sleep(60)
        
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É
        loop.run_until_complete(run_bot())
    except KeyboardInterrupt:
        logger.info("Keyboard interrupt received")
    except Exception as e:
        logger.critical(f"Top-level error: {str(e)}\n{traceback.format_exc()}")
    finally:
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–∫—Ä—ã—Ç
            if not loop.is_closed():
                # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                pending = [t for t in asyncio.all_tasks(loop) if not t.done()]
                
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                for task in pending:
                    task.cancel()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
                loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                loop.stop()
                loop.close()
            logger.info("Event loop stopped and closed")
        except Exception as e:
            logger.error(f"Error during final cleanup: {str(e)}")